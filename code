import time
import random

class Node:
    def __init__(self, value):
        self.value = value
        self.children = []

    def add_child(self, child_node):
        self.children.append(child_node)

    def __repr__(self):
        return f"Node({self.value})"

def create_tree():
    root = Node("Micro Mouse Tree")

    tree1 = Node("0,0")
    root.add_child(tree1)

    n01 = Node("0,1")
    n02 = Node("0,2")
    n03 = Node("0,3")
    n04 = Node("0,4")
    n14 = Node("1,4")

    tree1.add_child(n01)
    tree1.add_child(n02)
    tree1.add_child(n03)
    tree1.add_child(n04)
    tree1.add_child(n14)
    
    n15 = Node("1,5")
    n14.add_child(n15)

    n05 = Node("0,5")
    n16 = Node("1,6")
    
    n15.add_child(n05)
    n15.add_child(n16)
    
    n06 = Node("0,6")
    n07 = Node("0,7")
    n17 = Node("1,7")
    
    n05.add_child(n06)
    n05.add_child(n07)
    n05.add_child(n17)
    
    
    
    
    
    
    
    n13 = Node("1,3")
    n14.add_child(n13)

    n23 = Node("2,3")
    
    n13.add_child(n23)
    
    n24 = Node("2,4")
    n25 = Node("2,5")
    n22 = Node("2,2")
    
    n23.add_child(n24)
    n23.add_child(n25)
    n23.add_child(n22)
    
    n32 = Node("3,2")
    n42 = Node("4,2")
    n52 = Node("5,2")
    
    n23.add_child(n22)
    n23.add_child(n32)
    n23.add_child(n42)
    n23.add_child(n52)

    n62 = Node("6,2")
    n52.add_child(n62)

    n63 = Node("6,3")
    n72 = Node("7,2")
    n62.add_child(n72)
    n62.add_child(n63)
    
    n73 = Node("7,3")
    n74 = Node("7,4")
    n71 = Node("7,1")
    n70 = Node("7,0")
    
    n72.add_child(n73)
    n72.add_child(n74)
    n72.add_child(n71)
    n72.add_child(n70)

    n64 = Node("6,4")
    n65 = Node("6,5")
    n63.add_child(n64)
    n63.add_child(n65)

    n55 = Node("5,5")
    n65.add_child(n55)

    n45 = Node("4,5")
    n55.add_child(n45)

    n44 = Node("4,4")
    n45.add_child(n44)

    return root

def print_tree(node, level=0):
    print("  " * level + f"- {node.value}")
    for child in node.children:
        print_tree(child, level + 1)

slots = [
    (0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7),
    (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7),
    (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7),
    (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7),
    (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7),
    (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7),
    (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7),
    (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7)
]

def PrintMaze():
    print("+---+---+---+---+---+---+---+---+")
    print("|       |                       | 7")
    print("+   +---+   +---+---+   +---+   +")
    print("|   |           |   |   |       | 6")
    print("+   +   +---+   +   +---+   +---+")
    print("|       |   |   |               | 5")
    print("+---+   +   +---+   +---+   +---+")
    print("|       |   |       |   |   |   | 4")
    print("+   +   +   +   +   +   +   +   +")
    print("|   |       |       |   |   |   | 3")
    print("+   +   +   +---+---+   +   +   +")
    print("|   |   |                       | 2")
    print("+   +   +---+---+---+---+   +   +")
    print("|   |                   |   |   | 1")
    print("+   +   +---+---+   +   +   +   +")
    print("|   |           |   |       |   | 0")
    print("+---+---+---+---+---+---+---+---+")
    print("  0   1   2   3   4   5   6   7")

PrintMaze()
tree = create_tree()
print_tree(tree)
